library(recommenderlab)
library(reshape)
library(ggplot2)
mydata<-read.table("C:\\Users\\86181\\Desktop\\ml-100k\\u.data",header = FALSE,stringsAsFactors = TRUE)
View(mydata)            # 读取数据
mydata<-mydata[,-4]
ggplot(mydata,x=V3,aes(x=factor(1),fill=factor(V3)))+geom_bar(width = 1)+
coord_polar(theta="y")+ggtitle("评分分布图")+
labs(x="",y="")+
guides(fill=guide_legend(title = '评分分数'))
mydata<-cast(mydata,V1~V2,value="V3")
mydata<-mydata[,-1]
mydata<-as.data.frame(mydata)
dim(mydata)
mydata<-as.matrix(mydata)
mydata<-as(mydata,"realRatingMatrix")
colnames(mydata)<-paste0("movie",1:1682,sep="")
mydata.model <- Recommender( mydata[1:943], method = "UBCF")
# 预测1 （用户100~103 对电影 1000~1005 预测评分）
mydata.predict <- predict(mydata.model,mydata[100:110], type="ratings")
as(mydata.predict,"matrix")[1:4,1000:1005]
# 预测2 （给用户10~15 推荐5部电影）
mydata.predict1<-predict(mydata.model,mydata[10:15],n=5)
as(mydata.predict1,"list")
mydata.model <- Recommender( mydata[1:943], method = "IBCF")
# 预测1 （用户100~104 对电影 905~990 预测评分）
mydata.predict <- predict(mydata.model,mydata[100:110], type="ratings")
as(mydata.predict,"matrix")[1:5,905:990]
# 预测2 （给用户10~15 推荐5部电影）
mydata.predict1<-predict(mydata.model,mydata[10:15],n=5)
as(mydata.predict1,"list")
mydata.model <- Recommender(mydata[1:943], method = "SVD")
# 预测1 （用户100~103 对电影 1000~1005 预测评分）
mydata.predict <- predict(mydata.model, mydata[100:110], type="ratings")
as(mydata.predict, "matrix")[1:4, 1000:1005]
# 预测2 （给用户10~15 推荐5部电影）
mydata.predict1 <- predict(mydata.model, mydata[10:15], n=5)
as(mydata.predict1, "list")
mydata.model <- Recommender(mydata[1:943], method = "POPULAR")
# 预测1 （用户100~103 对电影 1000~1005 预测评分）
mydata.predict <- predict(mydata.model, mydata[100:110], type="ratings")
as(mydata.predict, "matrix")[1:4, 1000:1005]
# 预测2 （给用户10~15 推荐5部电影）
mydata.predict1 <- predict(mydata.model, mydata[10:15], n=5)
as(mydata.predict1, "list")
# 加载u.data文件
u_data <- read.table("C:\\Users\\86181\\Desktop\\ml-100k\\u.data", header = FALSE, sep = "\t", stringsAsFactors = TRUE)
colnames(u_data) <- c("UserID", "MovieID", "Rating", "Timestamp")
# 加载u.item文件
u_item <- read.table("C:\\Users\\86181\\Desktop\\ml-100k\\u.item", header = FALSE, sep = "|", quote = "", stringsAsFactors = TRUE)
colnames(u_item) <- c("MovieID", "MovieTitle", "ReleaseDate", "VideoReleaseDate", "IMDbURL",
"Unknown", "Action", "Adventure", "Animation", "Children", "Comedy",
"Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror",
"Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
# 查看数据
View(u_data)
View(u_item)
# 合并 u_data 和 u_item，基于 MovieID
merged_data <- merge(u_data, u_item, by = "MovieID")
# 确保 genre_columns 是数值类型
genre_columns <- colnames(u_item)[6:24]
merged_data[genre_columns] <- lapply(merged_data[genre_columns], as.numeric)     ####？？？
# 计算每个用户对每个类型的平均评分
user_genre_ratings <- aggregate(merged_data[, genre_columns],
by = list(merged_data$UserID),
FUN = mean)
# 检查 user_genre_ratings 的数据
print(head(user_genre_ratings))
# 设置评分阈值
rating_threshold <- 0.2  # 可以根据需要调整
# 判断用户是否喜欢某个类型
user_genre_likes <- user_genre_ratings[, -1] > rating_threshold
# 检查 user_genre_likes 的结果
print(head(user_genre_likes))
# 计算每个类型的电影的平均评分
genre_means <- colMeans(user_genre_ratings[, -1])  # 去掉第一列（UserID），计算每列的平均值
# 将结果转换为数据框，方便绘图
genre_means_df <- data.frame(
Genre = names(genre_means),
MeanRating = genre_means
)
# 绘制条形图
ggplot(genre_means_df, aes(x = reorder(Genre, -MeanRating), y = MeanRating, fill = Genre)) +
geom_bar(stat = "identity") +
labs(
title = "每个类型的电影的平均评分",
x = "电影类型",
y = "平均评分"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # 旋转x轴标签，避免重叠
# 统计每个类型的喜爱用户数*/
genre_likes_count <- colSums(user_genre_likes, na.rm = TRUE)
# 打印结果
print(genre_likes_count)
# 找到指定用户最喜欢的三个类型*/
# 指定用户ID
user_id <- 1  # 可以替换为其他用户ID
# 获取该用户对每个类型的平均评分
user_ratings <- user_genre_ratings[user_genre_ratings$Group.1 == user_id, -1]
# 将评分从宽格式转换为长格式（方便排序）
user_ratings_long <- data.frame(
Genre = colnames(user_ratings),
Rating = as.numeric(user_ratings)
)
# 按评分从高到低排序
user_ratings_sorted <- user_ratings_long[order(-user_ratings_long$Rating), ]
# 绘制条形图
ggplot(user_ratings_long, aes(x = reorder(Genre, -Rating), y = Rating, fill = Genre)) +
geom_bar(stat = "identity") +
labs(
title = paste("用户", user_id, "对每个类型的电影的平均评分"),
x = "电影类型",
y = "平均评分"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 找到评分最高的三个类型
top_3_genres <- head(user_ratings_sorted, 3)
# 打印结果
print(top_3_genres)
# 找到用户已经评分过的电影
rated_movies <- u_data[u_data$UserID == user_id, "MovieID"]
# 找到用户未评分过的电影
unrated_movies <- u_item[!u_item$MovieID %in% rated_movies, ]
# 提取评分最高的三个类型的名称
top_3_genre_names <- top_3_genres$Genre
# # 筛选出这些类型中的电影
# recommended_movies <- unrated_movies[rowSums(unrated_movies[, top_3_genres]) > 0, ]
# # ——————————————————格式错误修改
# 假设 unrated_movies 包含 MovieID 和 Title 列
unrated_movies_numeric <- unrated_movies[, !colnames(unrated_movies) %in% c("MovieID", "Title")]
# 确保 top_3_genres$Genre 是有效的列名
print(top_3_genres$Genre)
print(colnames(unrated_movies_numeric))
# 计算 rowSums
recommended_movies <- unrated_movies[rowSums(unrated_movies_numeric[, top_3_genres$Genre]) > 0, ]
# 打印推荐电影
print(recommended_movies)
# 计算每部电影的平均评分
movie_ratings <- aggregate(Rating ~ MovieID, data = u_data, FUN = mean, na.rm = TRUE)
# 合并电影信息和评分
recommended_movies_with_ratings <- merge(recommended_movies, movie_ratings, by = "MovieID")
# 按评分从高到低排序
recommended_movies_sorted <- recommended_movies_with_ratings[order(-recommended_movies_with_ratings$Rating), ]
# 提取电影类型信息
genre_columns <- colnames(u_item)[6:24]  # 所有类型列
recommended_movies_sorted$Genres <- apply(recommended_movies_sorted[, genre_columns], 1, function(row) {
paste(names(row[row == 1]), collapse = ", ")
})
# 推荐前五名电影
top_5_recommendations <- head(recommended_movies_sorted[, c("MovieID", "MovieTitle", "Rating", "Genres")], 5)
# 打印结果
print("基于评分推荐的前五名电影：")
print(top_5_recommendations)
# 计算每部电影的流行度
movie_popularity <- table(u_data$MovieID)
movie_popularity <- as.data.frame(movie_popularity)
colnames(movie_popularity) <- c("MovieID", "Popularity")
recommended_movies_with_popularity <- merge(recommended_movies, movie_popularity, by = "MovieID")
recommended_movies_sorted <- recommended_movies_with_popularity[order(-recommended_movies_with_popularity$Popularity), ]
# 提取电影类型信息
recommended_movies_sorted$Genres <- apply(recommended_movies_sorted[, genre_columns], 1, function(row) {
paste(names(row[row == 1]), collapse = ", ")
})
# 推荐前五名电影
top_5_recommendations <- head(recommended_movies_sorted[, c("MovieID", "MovieTitle", "Popularity", "Genres")], 5)
print("基于流行度推荐的前五名电影：")
print(top_5_recommendations)
# 计算每个类型的电影被评分的次数
genre_popularity <- colSums(merged_data[, genre_columns])
# 将结果转换为数据框，方便绘图
genre_popularity_df <- data.frame(
Genre = names(genre_popularity),
Popularity = genre_popularity
)
# 按流行度从高到低排序
genre_popularity_df <- genre_popularity_df[order(-genre_popularity_df$Popularity), ]
# 绘制条形图
ggplot(genre_popularity_df, aes(x = reorder(Genre, -Popularity), y = Popularity, fill = Genre)) +
geom_bar(stat = "identity") +
labs(
title = "每个类型电影的流行度",
x = "电影类型",
y = "被评分次数"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 指定用户ID
user_id <- 1  # 可以替换为其他用户ID
# 提取该用户的评分数据
user_data <- merged_data[merged_data$UserID == user_id, ]
# 计算该用户对每个类型的评分次数
user_genre_popularity <- colSums(user_data[, genre_columns])
# 将结果转换为数据框，方便绘图
user_genre_popularity_df <- data.frame(
Genre = names(user_genre_popularity),
Popularity = user_genre_popularity
)
# 按流行度从高到低排序
user_genre_popularity_df <- user_genre_popularity_df[order(-user_genre_popularity_df$Popularity), ]
# 绘制条形图
ggplot(user_genre_popularity_df, aes(x = reorder(Genre, -Popularity), y = Popularity, fill = Genre)) +
geom_bar(stat = "identity") +
labs(
title = paste("用户", user_id, "对各个类型电影的流行度"),
x = "电影类型",
y = "评分次数"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
